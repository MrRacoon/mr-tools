import { Path } from 'mr-types';
import { basename, dirname } from 'path';
import * as _ from 'ramda';
import { createSelector } from 'reselect';
import { Model } from './types';

export const getRootPackage = (state: Model): Path => state.rootPackage;
export const getRootPackageJson = createSelector(
  getRootPackage,
  require,
);

export const getSubPackages = (state: Model): Path[] => state.subPackages;
export const getSubPackageJsons = createSelector(
  getSubPackages,
  _.map(require),
);

export const getPackageMapObjects = createSelector(
  getRootPackageJson,
  getSubPackages,
  (rootJson, subs) => {
    return _.map((packagePath) => {
      const packageJson = require(packagePath);
      return {
        name: packageJson.name,
        cwd: dirname(packagePath),
        scripts: {
          ...rootJson.scripts,
          ...packageJson.scripts,
        },
        dependencies: {
          ..._.pick(packageJson.dependencies || [], rootJson.dependencies),
        },
      };
    }, subs);
  },
);

export const getPackageMap = createSelector(
  getPackageMapObjects,
  _.indexBy(_.prop('name')),
);
