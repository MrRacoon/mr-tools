import { Path } from 'mr-types';
import { basename, dirname } from 'path';
import * as _ from 'ramda';
import { createSelector } from 'reselect';
import { Model } from './types';

export const getRootPackage = (state: Model): Path => state.rootPackage;
export const getRootPackageJson = createSelector(
  getRootPackage,
  require,
);

export const getSubPackages = (state: Model): Path[] => state.subPackages;
export const getSubPackageJsons = createSelector(
  getSubPackages,
  _.map(require),
);

export const getSubPackageVersions =
  createSelector(
    getSubPackageJsons,
    (subs) =>
      _.mapObjIndexed(
        _.propOr('0.1.0', 'version'),
        _.indexBy(_.propOr('', 'name'), subs),
      ),
  );

export const getSubPackageDeps =
  createSelector(
    getSubPackageJsons,
    (subs) => _.mapObjIndexed(
      _.propOr([], 'dependencies'),
      _.indexBy(_.propOr('', 'name'), subs),
    ),
  );

export const getPackageMapObjects = createSelector(
  getRootPackageJson,
  getSubPackages,
  getSubPackageVersions,
  (rootJson, subs, depVersions) => {
    return _.map((packagePath) => {
      const packageJson = require(packagePath);
      const pickDeps = _.pick(packageJson.dependencies || []);
      return {
        name: packageJson.name,
        version: depVersions[packageJson.name],
        cwd: dirname(packagePath),
        scripts: {
          ...rootJson.scripts,
          ...packageJson.scripts,
        },
        dependencies: {
          ...pickDeps(depVersions),
          ...pickDeps(rootJson.dependencies),
        },
        ..._.pick(
          ['bugs', 'repository', 'author', 'license', 'homepage'],
          rootJson,
        ),
      };
    }, subs);
  },
);

export const getPackageMap = createSelector(
  getPackageMapObjects,
  _.indexBy(_.prop('name')),
);
