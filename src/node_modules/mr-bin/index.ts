import glob from 'glob';
import { config } from 'mr-config';
import dashboard from 'mr-dashboard';
import { requireRootPackage, subPackageJsonPaths } from 'mr-scrape';
import { actions, init, reducer, select } from 'mr-state';
import { RootPackageJson } from 'mr-types';
import _ from 'ramda';
import { applyMiddleware, createStore } from 'redux';
import thunk from 'redux-thunk';

// tslint:disable-next-line
const log = (msg: any) => console.log(JSON.stringify(msg, null, 2));

process.on('uncaughtException', (err) => {
  log(err);
});

process.on('unhandledRejection', (reason, p) => {
  log(`Unhandled Rejection at: ${p} reason: ${reason}`);
});

const store = createStore(reducer, init, applyMiddleware(thunk));

const rootPackagePath = `${config.root}/package.json`;

store.dispatch(actions.setRoot(rootPackagePath));

if (config.rootPackagePath) {
  log(rootPackagePath);
  process.exit();
}

const rootPackageJson: RootPackageJson =
  requireRootPackage(rootPackagePath);

if (config.rootPackageJson) {
  log(rootPackageJson);
  process.exit();
}

const subs = subPackageJsonPaths(rootPackageJson);
store.dispatch(actions.setSubs(subs));

if (config.subPackagePaths) {
  log(subs);
  process.exit();
}

const state = store.getState();

if (config.initState) {
  log(state);
  process.exit();
}

if (config.subs) {
  log(select.getSubPackageJsons(state));
}

if (config.names) {
  log(select.getSubPackageNames(state));
}

if (config.subsAfter) {
  const objs = select.getPackageMapObjects(state);
  log(objs);
}

if (config.fe) {
  dashboard(store);
}
