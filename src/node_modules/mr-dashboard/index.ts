import blessed from 'blessed';
import contrib from 'blessed-contrib';
import { actions, Actions, Model, select } from 'mr-state';
import { Name, PackageJson } from 'mr-types';
import _ from 'ramda';
import { Dispatch, Store } from 'redux';

export default function(store: Store<Model>) {
  const screen = blessed.screen();

  const grid = new contrib.grid({
    screen,
    rows: 12,
    cols: 12,
  });

  const logger = grid.set(8, 0, 4, 4, contrib.log, {
    label: 'Master Logger',
    fg: 'cyan',
  });

  const name = grid.set(0, 0, 8, 4, contrib.tree, {
    label: 'Package Names',
    fg: 'green',
    vi: true,
  });

  const focussed = grid.set(0, 4, 12, 8, contrib.tree, {
    label: 'Focussed Package',
    fg: 'yellow',
    vi: true,
  });

  const data = select.getSubPackageNames(store.getState())
    .reduce((obj, pkgName: string) => ({
      ...obj,
      [pkgName]: {},
    }), {});

  name.setData({
    extended: true,
    children: data,
  });

  interface Node {
    name: string;
  }

  // ===========================================================================
  // Focussed Package

  function expandJson(json: object): object {
    return _.mapObjIndexed((val, key) => {
      if (Array.isArray(val)) {
        logger.log(`${key} is array`);
        return {
          extended: true,
          children: _.reduce((obj, v) => {
            return {
              ...obj,
              [v]: {},
            };
          } , {}, val),
        };
      }
      if (typeof val === 'object') {
        logger.log(`${key} is object`);
        return {
          extended: true,
          children: expandJson(val),
        };
      }
      logger.log(`${key} is val ${val}`);
      return {
        extended: true,
        children: {
          [val]: {},
        },
      };
    }, json);
  }

  function setFocus(state: Model) {
    const focussedPackage = select.getFocusedPackageJson(state);
    if (focussedPackage) {
      focussed.setData({
        extended: true,
        children: expandJson(focussedPackage),
      });
    }
  }

  const setFocusThunk = (n: Name) => (dispatch: Dispatch<Actions>, getState: () => Model) => {
    dispatch(actions.setFocus(n));
    setFocus(getState());
  };

  name.on('select', (node: Node) => {
    logger.log(node.name);
    store.dispatch(actions.setFocus(node.name));
    setFocus(store.getState());
  });

  // ===========================================================================
  // Last Minute adjustments

  name.focus();

  screen.key([
    's', 'd',
    'escape', 'q', 'C-c',
  ], (ch, key) => {
    switch (ch) {
      case 's':
        return name.focus();
      case 'd':
        return focussed.focus();
      default:
        return process.exit(0);
    }
  });

  logger.log('rendering');

  screen.render();

  return {
    screen, grid, focussed,
    name,
  };
}
